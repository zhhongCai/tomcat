@startuml

header tomcat-9.0.30

title Server start()

note top
	at java.lang.Thread.dumpStack(Thread.java:1336)
	at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4871)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5180)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:717)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:690)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:705)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1133)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1867)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266)
	at java.util.concurrent.FutureTask.run(FutureTask.java)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:112)
	at org.apache.catalina.startup.HostConfig.deployDirectories(HostConfig.java:1045)
	at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:429)
	at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1576)
	at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:309)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:123)
	at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:423)
	at org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:366)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:936)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:841)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1384)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1374)
	at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266)
	at java.util.concurrent.FutureTask.run(FutureTask.java)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:134)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:909)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:262)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:421)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:930)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.startup.Catalina.start(Catalina.java:633)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:343)
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:474)





	at java.lang.Thread.dumpStack(Thread.java:1336)
    	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:932)
    	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:841)
    	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
    	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1384)
    	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1374)
    	at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266)
    	at java.util.concurrent.FutureTask.run(FutureTask.java)
    	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
    	at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:134)
    	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:909)
    	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:262)
    	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
    	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:421)
    	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
    	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:930)
    	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
    	at org.apache.catalina.startup.Catalina.start(Catalina.java:633)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:498)
    	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:343)
    	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:474)
end note

activate Catalina
Catalina -> StandardServer++: getServer().start();
    StandardServer -> LifecycleBase++: start()
        LifecycleBase ->LifecycleBase++
            note right
                如果server状态为STARTING_PREP or STARTING or STARTED 立即返回
                如果server状态为NEW: 调用init()
                如果server状态为FAILED: 调用stop()
            end note
        deactivate LifecycleBase

        LifecycleBase -> LifecycleBase++: setStateInternal(LifecycleState.STARTING_PREP, null, false)
        deactivate LifecycleBase

        LifecycleBase -> StandardServer++: startInternal()
            StandardServer -> StandardServer++:  fireLifecycleEvent(CONFIGURE_START_EVENT, null)
            deactivate StandardServer

            StandardServer -> StandardServer++:  setState(LifecycleState.STARTING)
            deactivate StandardServer

            StandardServer -> NamingResourcesImpl++: globalNamingResources.start()
                note right
                    LifecycleBase: start() -> NamingResourcesImpl.startInternal():

                    fireLifecycleEvent(CONFIGURE_START_EVENT, null);
                    setState(LifecycleState.STARTING);
                end note
            deactivate NamingResourcesImpl

            loop service in services
                StandardServer -> StandardService++: services[i].start()
                    note right
                        调用LifecycleBase.start()模板方法,模板方法中调用startInternal()
                    end note
                    LifecycleBase -> StandardService++: startInternal()
                        StandardService -> StandardService++: setState(LifecycleState.STARTING)
                        deactivate StandardService

                        StandardService -> StandardEngine++: engine.start()
                            note left
                            见StandardEngine_start.puml
                            end note
                        deactivate StandardEngine

                        loop executor in executors
                            StandardService -> StandardThreadExecutor++: executor.start()
                                note right
                                    调用LifecycleBase.start()模板方法,模板方法中调用startInternal()
                                end note

                                StandardThreadExecutor -> StandardThreadExecutor++: startInternal()
                                    note right
                                        创建线程池:
                                        taskqueue = new TaskQueue(Integer.MAX_VALUE)
                                        tf new TaskThreadFactory(namePrefix,daemon,getThreadPriority())
                                        executor = new ThreadPoolExecutor(25, 200, 60000, TimeUnit.MILLISECONDS,
                                              taskqueue, tf);

                                        setState(LifecycleState.STARTING);
                                    end note
                                deactivate StandardThreadExecutor
                            deactivate StandardThreadExecutor
                        end loop

                        StandardService -> MapperListener++: mapperListener.start()
                            note left
                                调用LifecycleBase.start()模板方法,模板方法中调用startInternal()
                            end note

                            MapperListener -> MapperListener++
                                note left
                                    setState(LifecycleState.STARTING);

                                    Engine engine = service.getContainer();
                                    if (engine == null) {
                                        return;
                                    }

                                    findDefaultHost();

                                    addListeners(engine);
                                end note
                            deactivate MapperListener

                            loop host in engine.findChildren()
                                MapperListener -> MapperListener++: registerHost(host)
                                    loop container in host.findChildren()
                                        MapperListener -> MapperListener++:  registerContext((Context) container)
                                            loop container in context.findChildren()
                                                MapperListener -> MapperListener++:  prepareWrapperMappingInfo(context, (Wrapper) container, wrappers);
                                                    note left
                                                    Populate wrappers list with information for registration of
                                                    mappings for this wrapper in this context.
                                                    end note
                                                deactivate MapperListener
                                            end loop
                                        deactivate MapperListener
                                    end loop

                                    MapperListener -> MapperListener++: findDefaultHost();
                                    deactivate MapperListener
                                deactivate MapperListener
                            end loop
                        deactivate MapperListener

                        loop connector in connectors
                            StandardService -> Connector++: connector.start()
                                note left
                                    调用LifecycleBase.start()模板方法,模板方法中调用startInternal()
                                end note
                                Connector -> Connector++: setState(LifecycleState.STARTING)
                                deactivate Connector

                                Connector -> AbstractProtocolHandler++: protocolHandler.start()
                                    AbstractProtocolHandler -> AbstractEndpoint++: endpoint.start()
                                    opt "bindState == BindState.UNBOUND"
                                        AbstractProtocolHandler -> AbstractProtocolHandler++: bindWithCleanup()
                                        deactivate AbstractProtocolHandler
                                    end opt
                                    deactivate AbstractEndpoint

                                    AbstractProtocolHandler -> NioEndpoint++: endpoint.startInternal()
                                        note left
                                            Start the NIO endpoint, creating acceptor, poller threads.

                                            其他endpoint:
                                            Nio2Endpoint.startInternal()
                                            AprEndpoint.startInternal()

                                            见*Endpoint_start.puml
                                        end note
                                    deactivate NioEndpoint
                                deactivate AbstractProtocolHandler
                            deactivate Connector
                        end loop
                    deactivate StandardService
                deactivate StandardService
            end loop

            StandardServer -> StandardServer++:
                note right
                    if periodicEventDelay > 0
                        monitorFuture = getUtilityExecutor().scheduleWithFixedDelay(
                                            new Runnable() {
                                                @Override
                                                public void run() {
                                                    startPeriodicLifecycleEvent();
                                                }
                                            }, 0, 60, TimeUnit.SECONDS);
                end note
            deactivate StandardServer
        LifecycleBase <-- StandardServer--

        opt "status = FAILED"
            StandardServer -> StandardServer++: stop()
            deactivate StandardServer
        else "status = STARTING"
            LifecycleBase -> LifecycleBase++: invalidTransition(Lifecycle.AFTER_START_EVENT);
            deactivate LifecycleBase
        else
            LifecycleBase -> LifecycleBase++: setStateInternal(LifecycleState.STARTED, null, false)
            deactivate LifecycleBase
        end opt
    deactivate LifecycleBase
deactivate StandardServer


@enduml